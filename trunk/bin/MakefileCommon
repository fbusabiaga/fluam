# Look for sources in the repository:
vpath %.cu $(SRC_FLUAM)
vpath %.c $(SRC_FLUAM)
vpath %.cpp $(SRC_FLUAM)
vpath %.h $(SRC_FLUAM)


#
#
#If we have HydroGrid add some more sources
ifneq ($(SRC_HYDROLIB),)
      vpath %.c $(SRC_HYDROLIB)
      vpath %.h $(SRC_HYDROLIB)
      vpath %.f90 $(SRC_HYDROLIB)
endif




###NVCCSOURCES += main.cu



OBJS = main.o \
cudaDevice.o \
loadDataMain.o \
initializeRandomNumber.o \
random_frenk.o \
rantest.o \
gauss.o \
schemeThermostat.o \
schemeRK3.o \
schemeBoundary.o \
schemeCompressibleParticles.o \
schemeSemiImplicitCompressibleParticles.o \
schemeFreeEnergyCompressibleParticles.o \
schemeMomentumCoupling.o \
schemeParticlesWall.o \
schemeIncompressible.o \
schemeIncompressibleBinaryMixture.o \
schemeIncompressibleBinaryMixtureMidPoint.o \
schemeIncompressibleBoundary.o \
schemeQuasiNeutrallyBuoyant.o \
schemeQuasiNeutrallyBuoyant2D.o \
schemeQuasiNeutrallyBuoyant4pt2D.o \
schemeTestJPS.o \
schemeStokesLimit.o \
createCells.o \
initializeFluid.o \
initializeFluidParticlesWall.o \
schemeRK3Ghost.o \
createCellsGhost.o \
modu.o \
initializeFluidGhost.o \
GPU.o \
saveTime.o \
saveSeed.o \
saveParticles.o \
saveParticlesDensity.o \
saveCellsAlongZ.o \
temperature.o \
temperatureBoundary.o \
temperatureBoundary2D.o \
temperatureGhost.o \
temperatureParticlesWall.o \
schemeBinaryMixture.o \
createCellsBinaryMixture.o \
createCellsIncompressibleBinaryMixture.o \
initializeFluidBinaryMixture.o \
totalConcentration.o \
schemeBinaryMixtureWall.o \
initializeFluidBinaryMixtureWall.o \
createBoundaries.o \
createParticles.o \
initializeBondedForces.o \
simpleCubic.o \
freeParticles.o \
schemeGiantFluctuations.o \
initializeFluidGiantFluctuations.o \
schemeContinuousGradient.o \
saveFluidFinalConfiguration.o \
saveFluidVTK.o \


#
#
#If we have HydroGrid add some more functions
ifneq ($(SRC_HYDROLIB),)
      OBJS += \
      hydroAnalysis.o \
      hydroAnalysisGhost.o \
      hydroAnalysisIncompressible.o \
      hydroAnalysisIncompressibleBinaryMixture.o \
      hydroAnalysisParticlesWall.o 
endif

#
#
#Add HydroGrid if you have the code
ifneq ($(SRC_HYDROLIB),)
      OBJS += \
      Precision.o \
      RNG.o \
      Random.o \
      RNGs.o \
      visit_writer.o \
      FFTW.o \
      VisitWriter.o \
      HydroGridModule.o \
      HydroGridCInterface.o 
endif




all : $(OBJS) ; $(NVCC) $(NVCCFLAGS) -o  $(EFILE) $(OBJS) $(LIBS)  \
$(LIBRARIES) -L/usr/lib64/ -L./ -lgfortran -lfftw3 -lfftw3f -lcufft -lm 



main.o : main.cpp header.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

cudaDevice.o : cudaDevice.cu header.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

saveFluidFinalConfiguration.o : saveFluidFinalConfiguration.cu header.h fluid.h cells.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

saveCellsAlongZ.o : saveCellsAlongZ.cu header.h fluid.h cells.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

saveFluidVTK.o : saveFluidVTK.cu header.h fluid.h cells.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

loadDataMain.o : loadDataMain.cu header.h cells.h particles.h fluid.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

initializeRandomNumber.o : initializeRandomNumber.cpp header.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

random_frenk.o: random_frenk.cu header.h  header_random.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

rantest.o: rantest.cu header.h header_random.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

gauss.o: gauss.cu header.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeThermostat.o: schemeThermostat.cu header.h; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeRK3.o: schemeRK3.cu header.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeBoundary.o: schemeBoundary.cu header.h cells.h boundary.h particles.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeCompressibleParticles.o: schemeCompressibleParticles.cu header.h cells.h boundary.h particles.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeSemiImplicitCompressibleParticles.o: schemeSemiImplicitCompressibleParticles.cu header.h cells.h boundary.h particles.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeFreeEnergyCompressibleParticles.o: schemeFreeEnergyCompressibleParticles.cu header.h cells.h boundary.h particles.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeMomentumCoupling.o: schemeMomentumCoupling.cu header.h cells.h boundary.h particles.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeParticlesWall.o: schemeParticlesWall.cu header.h cells.h boundary.h particles.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeIncompressible.o: schemeIncompressible.cu header.h cells.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeIncompressibleBinaryMixture.o: schemeIncompressibleBinaryMixture.cu header.h cells.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeIncompressibleBinaryMixtureMidPoint.o: schemeIncompressibleBinaryMixtureMidPoint.cu header.h cells.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeIncompressibleBoundary.o: schemeIncompressibleBoundary.cu header.h cells.h boundary.h \
particles.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeQuasiNeutrallyBuoyant.o: schemeQuasiNeutrallyBuoyant.cu header.h cells.h \
boundary.h particles.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeStokesLimit.o: schemeStokesLimit.cu header.h cells.h \
boundary.h particles.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeQuasiNeutrallyBuoyant2D.o: schemeQuasiNeutrallyBuoyant2D.cu header.h cells.h \
boundary.h particles.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeQuasiNeutrallyBuoyant4pt2D.o: schemeQuasiNeutrallyBuoyant4pt2D.cu header.h cells.h \
boundary.h particles.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeTestJPS.o: schemeTestJPS.cu header.h cells.h \
boundary.h particles.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

createCells.o: createCells.cpp header.h cells.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

createBoundaries.o: createBoundaries.cpp header.h boundary.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

createParticles.o: createParticles.cpp header.h boundary.h particles.h; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

initializeBondedForces.o: initializeBondedForces.cpp header.h boundary.h particles.h; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

simpleCubic.o: simpleCubic.cpp header.h cells.h particles.h; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

freeParticles.o: freeParticles.cu header.h boundary.h particles.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

saveParticles.o: saveParticles.cu header.h particles.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

saveParticlesDensity.o: saveParticlesDensity.cu header.h particles.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

initializeFluid.o: initializeFluid.cpp header.h fluid.h cells.h parameters.h temperature.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

initializeFluidparticlesWall.o: initializeFluidParticlesWall.cpp header.h fluid.h \
cells.h parameters.h temperature.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeRK3Ghost.o: schemeRK3Ghost.cu header.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

createCellsGhost.o: createCellsGhost.cpp header.h cells.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

modu.o: modu.cu ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

initializeFluidGhost.o: initializeFluidGhost.cpp header.h fluid.h cells.h parameters.h temperature.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

saveTime.o: saveTime.cpp header.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

saveSeed.o: saveSeed.cpp header.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

temperature.o: temperature.cu header.h fluid.h cells.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

temperatureBoundary.o: temperatureBoundary.cu header.h fluid.h cells.h particles.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

temperatureBoundary2D.o: temperatureBoundary2D.cu header.h fluid.h cells.h particles.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

temperatureGhost.o: temperatureGhost.cpp header.h fluid.h cells.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

temperatureParticlesWall.o: temperatureParticlesWall.cpp header.h fluid.h cells.h particles.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeBinaryMixture.o: schemeBinaryMixture.cu header.h cells.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

createCellsBinaryMixture.o: createCellsBinaryMixture.cpp header.h cells.h headerOtherFluidVariables.h; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

createCellsIncompressibleBinaryMixture.o: createCellsIncompressibleBinaryMixture.cu header.h cells.h headerOtherFluidVariables.h; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

initializeFluidBinaryMixture.o: initializeFluidBinaryMixture.cpp header.h fluid.h cells.h \
parameters.h temperature.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

totalConcentration.o: totalConcentration.cpp cells.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeBinaryMixtureWall.o: schemeBinaryMixtureWall.cu header.h cells.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeGiantFluctuations.o: schemeGiantFluctuations.cu header.h cells.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

initializeFluidBinaryMixtureWall.o: initializeFluidBinaryMixtureWall.cpp header.h fluid.h cells.h \
parameters.h temperature.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

initializeFluidGiantFluctuations.o: initializeFluidGiantFluctuations.cpp header.h fluid.h cells.h \
parameters.h temperature.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<

schemeContinuousGradient.o: schemeContinuousGradient.cu header.h cells.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<



#
#
#If we have HydroGrid
ifneq ($(SRC_HYDROLIB),)
hydroAnalysisGhost.o: hydroAnalysisGhost.cu hydroAnalysis.h cells.h header.h \
fluid.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS)  $(HydroAnalisysINCL) -c $<

hydroAnalysisParticlesWall.o: hydroAnalysisParticlesWall.cu hydroAnalysis.h cells.h header.h \
fluid.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS)  $(HydroAnalisysINCL) -c $<

hydroAnalysis.o: hydroAnalysis.cu hydroAnalysis.h cells.h header.h fluid.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS)  $(HydroAnalisysINCL) -c $<

hydroAnalysisIncompressible.o: hydroAnalysisIncompressible.cu hydroAnalysis.h cells.h \
header.h fluid.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS)  $(HydroAnalisysINCL) -c $<

hydroAnalysisIncompressibleBinaryMixture.o: hydroAnalysisIncompressibleBinaryMixture.cu \
hydroAnalysis.h cells.h \
header.h fluid.h headerOtherFluidVariables.h ; \
$(NVCC) $(NVCCFLAGS) $(NVCCINCLS)  $(HydroAnalisysINCL) -c $<

endif





#GPU functions and variables
GPU.o: GPU.cu gpuVariables.cu header.h cells.h fluid.h createCellsGPU.cu createCellsIncompressibleGPU.cu \
createCellsGhostGPU.cu freeMemoryRK3GPU.cu initializeFluidIncompressibleGPU.cu \
freeCellsGhostGPU.cu initializeFluidGhostGPU.cu initializeFluidGPU.cu runSchemeRK3.cu runSchemeThermostat.cu \
runSchemeRK3Ghost.cu texturesCells.cu runSchemeBoundary.cu runSchemeIncompressible.cu \
kernelConstructW.cu realToComplex.cu \
runSchemeIncompressibleBoundary.cu initializePrefactorFourierSpace.cu \
initGhostIndexGPU.cu kernelDpRK3.cu kernelDpThermostat.cu kernelDpRK3Ghost.cu moduGPU.cu \
saveFunctionsSchemeRK3.cu \
saveFunctionsSchemeThermostat.cu saveFunctionsSchemeBoundary.cu \
saveFunctionsSchemeRK3Ghost.cu gpuToHostRK3.cu kernelFeedGhostCellsRK3.cu \
runSchemeBinaryMixture.cu kernelDpBinaryMixture.cu kernelFeedGhostCellsBinaryMixture.cu \
gpuToHostBinaryMixture.cu saveFunctionsSchemeBinaryMixture.cu initializeFluidBinaryMixtureGPU.cu \
freeCellsBinaryMixtureGPU.cu createCellsBinaryMixtureGPU.cu runSchemeBinaryMixtureWall.cu \
kernelFeedGhostCellsBinaryMixtureWall.cu copyToGPUBinaryMixtureWall.cu runSchemeGiantFluctuations.cu \
kernelDpGiantFluctuations.cu kernelFeedGhostCellsGiantFluctuations.cu copyToGPUGiantFluctuations.cu \
runSchemeContinuousGradient.cu kernelDpContinuousGradient.cu randomNumbers.cu createBoundariesGPU.cu \
freeBoundariesGPU.cu allocateErrorArray.cu deltaGPU.cu initParticlesInCell.cu \
boundaryParticlesFunction.cu initializeNeighborsGPU.cu findNeighborParticles.cu forceBoundaryGPU.cu \
nonBondedForce.cu nonBondedForceExtraPressure.cu updateFluid.cu gpuToHostParticles.cu initForcesNonBonded.cu \
kernelUpdateVIncompressible.cu gpuToHostIncompressible.cu saveFunctionsSchemeIncompressible.cu \
gpuToHostIncompressibleBoundary.cu boundaryParticlesFunctionIncompressible.cu nonBondedForceIncompressible.cu \
saveFunctionsSchemeIncompressibleBoundary.cu projectionDivergenceFree.cu checkVelocity.cu \
forceIncompressibleBoundaryGPU.cu createBoundariesRK2GPU.cu createBoundaries4ptGPU.cu freeBoundariesRK2GPU.cu \
gpuToHostIncompressibleBoundaryRK2.cu runSchemeQuasiNeutrallyBuoyant.cu runSchemeQuasiNeutrallyBuoyant2D.cu \
runSchemeQuasiNeutrallyBuoyant4pt2D.cu kernelSpreadParticles.cu \
kernelConstructWQuasiNeutrallyBuoyant.cu \
kernelCorrectionVQuasiNeutrallyBuoyant.cu quasiNeutrallyBuoyantFunctions.cu firstStepQuasiNeutrallyBuoyant.cu \
firstStepQuasiNeutrallyBuoyant2D.cu firstStepQuasiNeutrallyBuoyant4pt2D.cu calculateAdvectionFluid.cu \
interpolateField.cu runSchemeCompressibleParticles.cu \
boundaryParticlesFunctionCompressibleParticles.cu nonBondedForceCompressibleParticles.cu \
nonBondedForceCompressibleParticlesExtraPressure.cu \
calculateVelocityAtHalfTimeStepCompressibleParticles.cu kernelDpCompressibleParticles.cu \
createCellsIncompressibleBinaryMixtureGPU.cu freeCellsIncompressibleBinaryMixtureGPU.cu \
runSchemeIncompressibleBinaryMixture.cu runSchemeIncompressibleBinaryMixtureMidPoint.cu kernelConstructWBinaryMixture.cu \
kernelUpdateIncompressibleBinaryMixture.cu \
saveFunctionsSchemeIncompressibleBinaryMixture.cu saveFunctionsSchemeIncompressibleBoundary2D.cu \
saveFunctionsSchemeParticlesWall.cu \
runSchemeParticlesWall.cu initGhostIndexParticlesWallGPU.cu kernelFeedGhostCellsParticlesWall.cu \
initializeVecinosGPU.cu kernelDpParticlesWall.cu boundaryParticlesFunctionParticlesWall.cu \
saveFunctionsSchemeIncompressibleBinaryMixture.cu createBondedForcesGPU.cu \
freeBondedForcesGPU.cu forceBondedGPU.cu saveFunctionsSchemeTestJPS.cu runSchemeTestJPS.cu \
quasiNeutrallyBuoyantFunctions2.cu quasiNeutrallyBuoyantFunctions2D.cu JPS.cu \
quasiNeutrallyBuoyantFunctions4pt2D.cu runSchemeFreeEnergyCompressibleParticles.cu \
boundaryParticlesFunctionFreeEnergyCompressibleParticles.cu \
freeEnergyCompressibleParticles.cu kernelDpFreeEnergyCompressibleParticles.cu \
runSchemeSemiImplicitCompressibleParticles.cu createCellsSemiImplicitCompressibleParticlesGPU.cu \
freeCellsSemiImplicitCompressibleParticlesGPU.cu kernelDpSemiImplicitCompressibleParticles.cu \
kernelConstructWSemiImplicitCompressibleParticles.cu kernelUpdateRhoSemiImplicit.cu \
runSchemeSemiImplicitCompressibleParticles.cu saveFunctionsSchemeSemiImplicitCompressibleParticles.cu \
runSchemeMomentumCoupling.cu boundaryParticlesFunctionMomentumCoupling.cu nonBondedForceMomentumCoupling.cu \
updateFluidMomentumCoupling.cu saveFunctionsSchemeStokesLimit.cu runSchemeStokesLimit.cu \
boundaryParticlesFunctionStokesLimit.cu stokesLimitFunctions.cu createCellsStokesLimitGPU.cu \
freeCellsStokesLimitGPU.cu ; \
	$(NVCC) $(NVCCFLAGS) $(NVCCINCLS) $(HDRS) -c $<




#
#
#If we have HydroGrid
ifneq ($(SRC_HYDROLIB)),)
#HydroAnalisis from Aleks
Precision.o: Precision.f90 ; \
	$(FC) $(FCFLAGS) -c $<

RNG.o: RNG.f90 Random.o ; \
	$(FC) $(FCFLAGS) -c $<

Random.o: Random.f90 Precision.o ; \
	$(FC) $(FCFLAGS) -c $<

RNGs.o: RNGs.c ; \
	$(NVCC) $(NVCCFLAGS) -c -DBL_FORT_USE_UNDERSCORE $<

visit_writer.o: visit_writer.c ; \
	$(NVCC) $(NVCCFLAGS) -c $<

FFTW.o: FFTW.f90 Precision.o ; \
	$(FC) $(FCFLAGS) -c $<

VisitWriter.o: VisitWriter.f90 ; \
	$(FC) $(FCFLAGS) -c $<

HydroGridModule.o: HydroGridModule.f90 FFTW.o VisitWriter.o ; \
	$(FC) $(FCFLAGS) -c $<

HydroGridCInterface.o: HydroGridCInterface.f90 HydroGridModule.o ; \
	$(FC) $(FCFLAGS) -c $<
endif

clean:	; rm -f $(OBJS) $(EFILE) *.mod *.o





