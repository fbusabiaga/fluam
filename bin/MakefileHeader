#
#
#Path to fluam
SRC_FLUAM=../src/

#
#
# Path to HydroGrid
# Uncomment if you have HydroGrid
# SRC_HYDROLIB=../../HydroGrid/src/


#
#
#Fortran compiler
FC = gfortran

#
#
#Cuda compiler
NVCC = nvcc
#NVCC = cuda-gdb


#
#
#Some libraries may be required
#CUDALIB=-L/usr/local/cuda-5.0/lib64 -lcurand

#
#
# Cuda flags, some possible options are:
# Set optimization: (default) -O3
# Use a specific c++ compiler: --compiler-bindir /usr/bin/gcc
# Compile for a given architecture, for example 2.0: -arch=sm_20
NVCCFLAGS = '-O3' '-arch=sm_52' $(CUDALIB)

#
#
#Other flags you may want to add
#-use_fast_math
#-arch=sm_11 
#-arch=sm_13 
#-arch=sm_20 
#-deviceemu
#-ptxas-options=-v
#-g -G #debug mode

#
#
#Fortran flags
FCFLAGS = -O -Wall -ffree-line-length-none # Optimized

#
#
#Executable name
EFILE = fluam

#
#
#Includes for fluam,
NVCCINCLS = -I./ -I$(SRC_FLUAM) 

#
#
#Includes for fluam, path to cutil.h file
#We assume NVIDIA_GPU_Computing_SDK is in the user HOME
#NVIDIA_GPU_Computing_SDK is needed for the cutil.h files
#NVCCINCLS += -I$(HOME)/NVIDIA_GPU_Computing_SDK/C/common/inc/
NVCCINCLS +=

#
#
#Libraries -lfftw3 -lfftw3f
LIBRARIES = -L/usr/local/cuda/lib64 -lcurand -L/usr/lib64/ -L./ -lgfortran -lcufft -lm -lfftw3 -lfftw3f
STATIC_LIBRARIES = 

#
#
#If we have HydroGrid
ifneq ($(SRC_HYDROLIB),)
HydroAnalisysINCL = -I$(SRC_HYDROLIB)
STATIC_LIBRARIES += -L$(SRC_HYDROLIB) -lCallHydroGrid -L$(SRC_HYDROLIB) -lHydroAnalysis

# Add python
STATIC_LIBRARIES += -lpython2.7
# STATIC_LIBRARIES += -lutil -L/usr/local/stow/python-2.7/lib/python2.7/config/ -lpython2.7

BOOST_LIB = /usr/lib64/boost
LIBRARIES += -L$(BOOST_LIB) -lboost_python 
endif

#
#
#Objects
OBJS=
